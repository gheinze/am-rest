package com.accounted4.am.rest.securityservice.oauth2;

import com.accounted4.am.rest.security.RestAuthenticationException;
import com.accounted4.am.rest.security.config.OAuth2AuthProviderProperties;
import com.accounted4.am.rest.security.controller.LoginController;
import com.accounted4.am.rest.security.model.AuthCodeResponse;
import com.accounted4.am.rest.security.AuthenticationExceptionTypes;
import com.accounted4.am.rest.security.GuidGenerator;
import lombok.extern.slf4j.Slf4j;
import net.sf.ehcache.Cache;
import net.sf.ehcache.Element;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.web.servlet.mvc.method.annotation.MvcUriComponentsBuilder;
import org.springframework.web.util.UriComponentsBuilder;

/**
 * Handle communication dealing with the acquisition of an Auth Code
 * from an OAuth2 Authorization Provider.
 *
 * @author gheinze
 */
@Service
@Slf4j
public class AuthCodeHandler {


    /* A random token is generated, stored in a short expiry time cache, and included in as
     * the "state" parameter of the redirect sent back to the client for retrieving an AuthCode.
     * The cache is used to verify that the "state" parameter in the subsequent request with the AuthCode
     * was actually generated by this server. The "state" value would only be retrieved once
     * at which point it may immediately be discarded. If not retrieved, it may be quickly expired and discarded.
     */
    private final Cache authCodeStateCache;


    @Autowired
    public AuthCodeHandler(Cache authCodeStateCache) {
        this.authCodeStateCache = authCodeStateCache;
    }




    /**
     * Gets the url to which the cient should be redirected by the Auth Server
     * back to the Application Server for processing the Auth Code.
     * @param providerName
     * @return
     */
    public String getRedirectClientToAppServer(OAuth2AuthProviderName providerName) {
        String authCodeHandlerPath = "/" + providerName.name() + "/oauth2Callback";
        String authCodeHandlerUrl =  MvcUriComponentsBuilder
                .fromController(LoginController.class)
                .path(authCodeHandlerPath)
                .build()
                .toString()
                ;
        return authCodeHandlerUrl;
    }




    /**
     * Gets the url to which the client should be redirected for retrieving an Auth Code.
     *
     * @param provider
     * @return
     */
    public String getRedirectClientToAuthProvider(OAuth2AuthProviderProperties provider) {

        String authCodeRequestStateToken = GuidGenerator.generateRandomId();

        String redirectForAuthCodeUri = UriComponentsBuilder
                .fromHttpUrl(provider.getAuthorizationCodeEndpoint())
                .queryParam("client_id", provider.getClientId())
                .queryParam("response_type", "code")
                .queryParam("scope", getUriReadyScopes(provider))
                .queryParam("redirect_uri", getRedirectClientToAppServer(provider.getProviderName()))
                .queryParam("state", authCodeRequestStateToken)
                .build()
                .toUriString()
                ;

        cacheAuthCodeRequestStateToken(authCodeRequestStateToken);

        return redirectForAuthCodeUri;

    }


    private void cacheAuthCodeRequestStateToken(String token) {
        Element element = new Element(token, null);
        authCodeStateCache.put(element);
    }


    private static final String CONFIG_SCOPE_DELIMITER = ",";
    private static final String URL_QUERY_SPACE_DELIMITER = "%20";

    private String getUriReadyScopes(OAuth2AuthProviderProperties provider) {
        return provider.getScope().replace(CONFIG_SCOPE_DELIMITER, URL_QUERY_SPACE_DELIMITER);
    }



    public void validateAuthCodeStateToken(AuthCodeResponse authCodeResponse) {
        String returnedStateToken = authCodeResponse.getState();
        if (null == authCodeStateCache.get(returnedStateToken)) {
            throw(new RestAuthenticationException(AuthenticationExceptionTypes.UnrecognizedAuthCodeState.getErrorResponse("")));
        }
    }


}
